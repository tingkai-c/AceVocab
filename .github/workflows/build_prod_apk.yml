name: "Build Production Android"

on:
  push:
    branches:
      - main

jobs:  
  build:      
    name: Build & Release 
    runs-on: ubuntu-latest 

    steps:
        #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

        #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

        #3 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

        #4 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

        #5 Setup Keystore
      - name: Decode Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
        
       #6 Building APK
      - name: Build APK
        run: flutter build apk --release

        #7 Building App Bundle (aab)
      - name: Build appBundle
        run: flutter build appbundle
        #9 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: error # Error if apk is not found.
          retention-days: 3       # Keep the artifact for 5 days.
  

        #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        #11 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        #12 Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
        
      #   #13 Create Release
      # - name: Create Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab"
      #     tag: v${{ env.VERSION }}
      #     token: ${{ secrets.TOKEN }}
        #

      - name: Upload to google play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: kai.c.acevocab
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          status: completed
          inAppUpdatePriority: 2
          # whatsNewDirectory: distribution/whatsnew
          # mappingFile: app/build/outputs/mapping/release/mapping.txt
          # debugSymbols: app/intermediates/merged_native_libs/release/out/lib
